# coding: utf-8

"""
    Outline API

    # Introduction  The Outline API is structured in an RPC style. It enables you to programatically interact with all aspects of Outline’s data – in fact, the main application is built on exactly the same API.  The API structure is available as an  [openapi specification](https://github.com/outline/openapi) if that’s your  jam – it can be used to generate clients for most programming languages.  # Making requests  Outline’s API follows simple RPC style conventions where each API endpoint is a method on `https://app.getoutline.com/api/method`. Both `GET` and `POST`  methods are supported but it’s recommended that you make all call using POST. Only HTTPS is supported and all response payloads are JSON.  When making `POST` requests, request parameters are parsed depending on Content-Type header. To make a call using JSON payload, you must pass Content-Type: application/json header, here’s an example using CURL:  ``` curl https://app.getoutline.com/api/documents.info -X POST -H 'authorization: Bearer MY_API_KEY' -H 'content-type: application/json' -H 'accept: application/json' -d '{\"id\": \"outline-api-NTpezNwhUP\"}' ```  Or, with JavaScript:  ```javascript const response = await fetch(\"https://app.getoutline.com/api/documents.info\", {   method: \"POST\",   headers: {     Accept: \"application/json\",     \"Content-Type\": \"application/json\",     Authorization: 'Bearer MY_API_KEY'   } })  const body = await response.json(); const document = body.data; ```  # Authentication  To access API endpoints, you must provide a valid API key. You can create new API keys in your [account settings](https://app.getoutline.com/settings). Be careful when handling your keys as they give access to all of your documents, you should treat them like passwords and they should never be committed to source control.  To authenticate with API, you can supply the API key as a header (`Authorization: Bearer YOUR_API_KEY`) or as part of the payload using `token`  parameter. Header based authentication is highly recommended so that your keys don’t accidentally leak into logs.  Some API endpoints allow unauthenticated requests for public resources and they can be called without an API key.  # Errors  All successful API requests will be returned with a 200 or 201 status code and `ok: true` in the response payload. If there’s an error while making the request, the appropriate status code is returned with the error message:  ``` {   \"ok\": false,   \"error: \"Not Found\" } ```  # Pagination  Most top-level API resources have support for \"list\" API methods. For instance, you can list users, documents, and collections. These list methods share common parameters, taking both `limit` and `offset`.  Responses will echo these parameters in the root `pagination` key, and also include a `nextPath` key which can be used as a handy shortcut to fetch the next page of results. For example:  ``` {   ok: true,   status: 200,   data: […],   pagination: {     limit: 25,     offset: 0,     nextPath: \"/api/documents.list?limit=25&offset=25\"   } } ```  # Policies  Many API resources have associated \"policies\", these objects describe the current API keys authorized actions related to an individual resource. It should be noted that the policy \"id\" is identical to the resource it is related to, policies themselves do not have unique identifiers.  For most usecases of the API, policies can be safely ignored. Calling unauthorized methods will result in the appropriate response code – these are used in the main Outline UI to adjust which elements are visible.   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: hello@getoutline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PolicyAbilities(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create': 'bool',
        'read': 'bool',
        'update': 'bool',
        'delete': 'bool',
        'restore': 'bool',
        'star': 'bool',
        'unstar': 'bool',
        'share': 'bool',
        'download': 'bool',
        'pin': 'bool',
        'unpin': 'bool',
        'move': 'bool',
        'archive': 'bool',
        'unarchive': 'bool',
        'create_child_document': 'bool'
    }

    attribute_map = {
        'create': 'create',
        'read': 'read',
        'update': 'update',
        'delete': 'delete',
        'restore': 'restore',
        'star': 'star',
        'unstar': 'unstar',
        'share': 'share',
        'download': 'download',
        'pin': 'pin',
        'unpin': 'unpin',
        'move': 'move',
        'archive': 'archive',
        'unarchive': 'unarchive',
        'create_child_document': 'createChildDocument'
    }

    def __init__(self, create=None, read=None, update=None, delete=None, restore=None, star=None, unstar=None, share=None, download=None, pin=None, unpin=None, move=None, archive=None, unarchive=None, create_child_document=None):  # noqa: E501
        """PolicyAbilities - a model defined in Swagger"""  # noqa: E501
        self._create = None
        self._read = None
        self._update = None
        self._delete = None
        self._restore = None
        self._star = None
        self._unstar = None
        self._share = None
        self._download = None
        self._pin = None
        self._unpin = None
        self._move = None
        self._archive = None
        self._unarchive = None
        self._create_child_document = None
        self.discriminator = None
        if create is not None:
            self.create = create
        if read is not None:
            self.read = read
        if update is not None:
            self.update = update
        if delete is not None:
            self.delete = delete
        if restore is not None:
            self.restore = restore
        if star is not None:
            self.star = star
        if unstar is not None:
            self.unstar = unstar
        if share is not None:
            self.share = share
        if download is not None:
            self.download = download
        if pin is not None:
            self.pin = pin
        if unpin is not None:
            self.unpin = unpin
        if move is not None:
            self.move = move
        if archive is not None:
            self.archive = archive
        if unarchive is not None:
            self.unarchive = unarchive
        if create_child_document is not None:
            self.create_child_document = create_child_document

    @property
    def create(self):
        """Gets the create of this PolicyAbilities.  # noqa: E501


        :return: The create of this PolicyAbilities.  # noqa: E501
        :rtype: bool
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this PolicyAbilities.


        :param create: The create of this PolicyAbilities.  # noqa: E501
        :type: bool
        """

        self._create = create

    @property
    def read(self):
        """Gets the read of this PolicyAbilities.  # noqa: E501


        :return: The read of this PolicyAbilities.  # noqa: E501
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this PolicyAbilities.


        :param read: The read of this PolicyAbilities.  # noqa: E501
        :type: bool
        """

        self._read = read

    @property
    def update(self):
        """Gets the update of this PolicyAbilities.  # noqa: E501


        :return: The update of this PolicyAbilities.  # noqa: E501
        :rtype: bool
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this PolicyAbilities.


        :param update: The update of this PolicyAbilities.  # noqa: E501
        :type: bool
        """

        self._update = update

    @property
    def delete(self):
        """Gets the delete of this PolicyAbilities.  # noqa: E501


        :return: The delete of this PolicyAbilities.  # noqa: E501
        :rtype: bool
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this PolicyAbilities.


        :param delete: The delete of this PolicyAbilities.  # noqa: E501
        :type: bool
        """

        self._delete = delete

    @property
    def restore(self):
        """Gets the restore of this PolicyAbilities.  # noqa: E501


        :return: The restore of this PolicyAbilities.  # noqa: E501
        :rtype: bool
        """
        return self._restore

    @restore.setter
    def restore(self, restore):
        """Sets the restore of this PolicyAbilities.


        :param restore: The restore of this PolicyAbilities.  # noqa: E501
        :type: bool
        """

        self._restore = restore

    @property
    def star(self):
        """Gets the star of this PolicyAbilities.  # noqa: E501


        :return: The star of this PolicyAbilities.  # noqa: E501
        :rtype: bool
        """
        return self._star

    @star.setter
    def star(self, star):
        """Sets the star of this PolicyAbilities.


        :param star: The star of this PolicyAbilities.  # noqa: E501
        :type: bool
        """

        self._star = star

    @property
    def unstar(self):
        """Gets the unstar of this PolicyAbilities.  # noqa: E501


        :return: The unstar of this PolicyAbilities.  # noqa: E501
        :rtype: bool
        """
        return self._unstar

    @unstar.setter
    def unstar(self, unstar):
        """Sets the unstar of this PolicyAbilities.


        :param unstar: The unstar of this PolicyAbilities.  # noqa: E501
        :type: bool
        """

        self._unstar = unstar

    @property
    def share(self):
        """Gets the share of this PolicyAbilities.  # noqa: E501


        :return: The share of this PolicyAbilities.  # noqa: E501
        :rtype: bool
        """
        return self._share

    @share.setter
    def share(self, share):
        """Sets the share of this PolicyAbilities.


        :param share: The share of this PolicyAbilities.  # noqa: E501
        :type: bool
        """

        self._share = share

    @property
    def download(self):
        """Gets the download of this PolicyAbilities.  # noqa: E501


        :return: The download of this PolicyAbilities.  # noqa: E501
        :rtype: bool
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this PolicyAbilities.


        :param download: The download of this PolicyAbilities.  # noqa: E501
        :type: bool
        """

        self._download = download

    @property
    def pin(self):
        """Gets the pin of this PolicyAbilities.  # noqa: E501


        :return: The pin of this PolicyAbilities.  # noqa: E501
        :rtype: bool
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """Sets the pin of this PolicyAbilities.


        :param pin: The pin of this PolicyAbilities.  # noqa: E501
        :type: bool
        """

        self._pin = pin

    @property
    def unpin(self):
        """Gets the unpin of this PolicyAbilities.  # noqa: E501


        :return: The unpin of this PolicyAbilities.  # noqa: E501
        :rtype: bool
        """
        return self._unpin

    @unpin.setter
    def unpin(self, unpin):
        """Sets the unpin of this PolicyAbilities.


        :param unpin: The unpin of this PolicyAbilities.  # noqa: E501
        :type: bool
        """

        self._unpin = unpin

    @property
    def move(self):
        """Gets the move of this PolicyAbilities.  # noqa: E501


        :return: The move of this PolicyAbilities.  # noqa: E501
        :rtype: bool
        """
        return self._move

    @move.setter
    def move(self, move):
        """Sets the move of this PolicyAbilities.


        :param move: The move of this PolicyAbilities.  # noqa: E501
        :type: bool
        """

        self._move = move

    @property
    def archive(self):
        """Gets the archive of this PolicyAbilities.  # noqa: E501


        :return: The archive of this PolicyAbilities.  # noqa: E501
        :rtype: bool
        """
        return self._archive

    @archive.setter
    def archive(self, archive):
        """Sets the archive of this PolicyAbilities.


        :param archive: The archive of this PolicyAbilities.  # noqa: E501
        :type: bool
        """

        self._archive = archive

    @property
    def unarchive(self):
        """Gets the unarchive of this PolicyAbilities.  # noqa: E501


        :return: The unarchive of this PolicyAbilities.  # noqa: E501
        :rtype: bool
        """
        return self._unarchive

    @unarchive.setter
    def unarchive(self, unarchive):
        """Sets the unarchive of this PolicyAbilities.


        :param unarchive: The unarchive of this PolicyAbilities.  # noqa: E501
        :type: bool
        """

        self._unarchive = unarchive

    @property
    def create_child_document(self):
        """Gets the create_child_document of this PolicyAbilities.  # noqa: E501


        :return: The create_child_document of this PolicyAbilities.  # noqa: E501
        :rtype: bool
        """
        return self._create_child_document

    @create_child_document.setter
    def create_child_document(self, create_child_document):
        """Sets the create_child_document of this PolicyAbilities.


        :param create_child_document: The create_child_document of this PolicyAbilities.  # noqa: E501
        :type: bool
        """

        self._create_child_document = create_child_document

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyAbilities, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyAbilities):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
