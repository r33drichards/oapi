# coding: utf-8

"""
    Outline API

    # Introduction  The Outline API is structured in an RPC style. It enables you to programatically interact with all aspects of Outline’s data – in fact, the main application is built on exactly the same API.  The API structure is available as an  [openapi specification](https://github.com/outline/openapi) if that’s your  jam – it can be used to generate clients for most programming languages.  # Making requests  Outline’s API follows simple RPC style conventions where each API endpoint is a method on `https://app.getoutline.com/api/method`. Both `GET` and `POST`  methods are supported but it’s recommended that you make all call using POST. Only HTTPS is supported and all response payloads are JSON.  When making `POST` requests, request parameters are parsed depending on Content-Type header. To make a call using JSON payload, you must pass Content-Type: application/json header, here’s an example using CURL:  ``` curl https://app.getoutline.com/api/documents.info -X POST -H 'authorization: Bearer MY_API_KEY' -H 'content-type: application/json' -H 'accept: application/json' -d '{\"id\": \"outline-api-NTpezNwhUP\"}' ```  Or, with JavaScript:  ```javascript const response = await fetch(\"https://app.getoutline.com/api/documents.info\", {   method: \"POST\",   headers: {     Accept: \"application/json\",     \"Content-Type\": \"application/json\",     Authorization: 'Bearer MY_API_KEY'   } })  const body = await response.json(); const document = body.data; ```  # Authentication  To access API endpoints, you must provide a valid API key. You can create new API keys in your [account settings](https://app.getoutline.com/settings). Be careful when handling your keys as they give access to all of your documents, you should treat them like passwords and they should never be committed to source control.  To authenticate with API, you can supply the API key as a header (`Authorization: Bearer YOUR_API_KEY`) or as part of the payload using `token`  parameter. Header based authentication is highly recommended so that your keys don’t accidentally leak into logs.  Some API endpoints allow unauthenticated requests for public resources and they can be called without an API key.  # Errors  All successful API requests will be returned with a 200 or 201 status code and `ok: true` in the response payload. If there’s an error while making the request, the appropriate status code is returned with the error message:  ``` {   \"ok\": false,   \"error: \"Not Found\" } ```  # Pagination  Most top-level API resources have support for \"list\" API methods. For instance, you can list users, documents, and collections. These list methods share common parameters, taking both `limit` and `offset`.  Responses will echo these parameters in the root `pagination` key, and also include a `nextPath` key which can be used as a handy shortcut to fetch the next page of results. For example:  ``` {   ok: true,   status: 200,   data: […],   pagination: {     limit: 25,     offset: 0,     nextPath: \"/api/documents.list?limit=25&offset=25\"   } } ```  # Policies  Many API resources have associated \"policies\", these objects describe the current API keys authorized actions related to an individual resource. It should be noted that the policy \"id\" is identical to the resource it is related to, policies themselves do not have unique identifiers.  For most usecases of the API, policies can be safely ignored. Calling unauthorized methods will result in the appropriate response code – these are used in the main Outline UI to adjust which elements are visible.   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: hello@getoutline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Team(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'avatar_url': 'str',
        'sharing': 'bool',
        'default_collection_id': 'str',
        'default_user_role': 'str',
        'member_collection_create': 'bool',
        'document_embeds': 'bool',
        'collaborative_editing': 'bool',
        'invite_required': 'bool',
        'allowed_domains': 'list[str]',
        'guest_signin': 'bool',
        'subdomain': 'str',
        'url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'avatar_url': 'avatarUrl',
        'sharing': 'sharing',
        'default_collection_id': 'defaultCollectionId',
        'default_user_role': 'defaultUserRole',
        'member_collection_create': 'memberCollectionCreate',
        'document_embeds': 'documentEmbeds',
        'collaborative_editing': 'collaborativeEditing',
        'invite_required': 'inviteRequired',
        'allowed_domains': 'allowedDomains',
        'guest_signin': 'guestSignin',
        'subdomain': 'subdomain',
        'url': 'url'
    }

    def __init__(self, id=None, name=None, avatar_url=None, sharing=None, default_collection_id=None, default_user_role=None, member_collection_create=None, document_embeds=None, collaborative_editing=None, invite_required=None, allowed_domains=None, guest_signin=None, subdomain=None, url=None):  # noqa: E501
        """Team - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._avatar_url = None
        self._sharing = None
        self._default_collection_id = None
        self._default_user_role = None
        self._member_collection_create = None
        self._document_embeds = None
        self._collaborative_editing = None
        self._invite_required = None
        self._allowed_domains = None
        self._guest_signin = None
        self._subdomain = None
        self._url = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if sharing is not None:
            self.sharing = sharing
        if default_collection_id is not None:
            self.default_collection_id = default_collection_id
        if default_user_role is not None:
            self.default_user_role = default_user_role
        if member_collection_create is not None:
            self.member_collection_create = member_collection_create
        if document_embeds is not None:
            self.document_embeds = document_embeds
        if collaborative_editing is not None:
            self.collaborative_editing = collaborative_editing
        if invite_required is not None:
            self.invite_required = invite_required
        if allowed_domains is not None:
            self.allowed_domains = allowed_domains
        if guest_signin is not None:
            self.guest_signin = guest_signin
        if subdomain is not None:
            self.subdomain = subdomain
        if url is not None:
            self.url = url

    @property
    def id(self):
        """Gets the id of this Team.  # noqa: E501

        Unique identifier for the object.  # noqa: E501

        :return: The id of this Team.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Team.

        Unique identifier for the object.  # noqa: E501

        :param id: The id of this Team.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Team.  # noqa: E501

        The name of this team, it is usually auto-generated when the first SSO connection is made but can be changed if neccessary.  # noqa: E501

        :return: The name of this Team.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Team.

        The name of this team, it is usually auto-generated when the first SSO connection is made but can be changed if neccessary.  # noqa: E501

        :param name: The name of this Team.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def avatar_url(self):
        """Gets the avatar_url of this Team.  # noqa: E501

        The URL for the image associated with this team, it will be displayed in the team switcher and in the top left of the knowledge base along with the name.  # noqa: E501

        :return: The avatar_url of this Team.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this Team.

        The URL for the image associated with this team, it will be displayed in the team switcher and in the top left of the knowledge base along with the name.  # noqa: E501

        :param avatar_url: The avatar_url of this Team.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def sharing(self):
        """Gets the sharing of this Team.  # noqa: E501

        Whether this team has share links globally enabled. If this value is false then all sharing UI and APIs are disabled.  # noqa: E501

        :return: The sharing of this Team.  # noqa: E501
        :rtype: bool
        """
        return self._sharing

    @sharing.setter
    def sharing(self, sharing):
        """Sets the sharing of this Team.

        Whether this team has share links globally enabled. If this value is false then all sharing UI and APIs are disabled.  # noqa: E501

        :param sharing: The sharing of this Team.  # noqa: E501
        :type: bool
        """

        self._sharing = sharing

    @property
    def default_collection_id(self):
        """Gets the default_collection_id of this Team.  # noqa: E501

        If set then the referenced collection is where users will be redirected to after signing in instead of the Home screen  # noqa: E501

        :return: The default_collection_id of this Team.  # noqa: E501
        :rtype: str
        """
        return self._default_collection_id

    @default_collection_id.setter
    def default_collection_id(self, default_collection_id):
        """Sets the default_collection_id of this Team.

        If set then the referenced collection is where users will be redirected to after signing in instead of the Home screen  # noqa: E501

        :param default_collection_id: The default_collection_id of this Team.  # noqa: E501
        :type: str
        """

        self._default_collection_id = default_collection_id

    @property
    def default_user_role(self):
        """Gets the default_user_role of this Team.  # noqa: E501

        If set then this role will be used as the default for users that signup via SSO  # noqa: E501

        :return: The default_user_role of this Team.  # noqa: E501
        :rtype: str
        """
        return self._default_user_role

    @default_user_role.setter
    def default_user_role(self, default_user_role):
        """Sets the default_user_role of this Team.

        If set then this role will be used as the default for users that signup via SSO  # noqa: E501

        :param default_user_role: The default_user_role of this Team.  # noqa: E501
        :type: str
        """
        allowed_values = ["viewer", "member", "admin"]  # noqa: E501
        if default_user_role not in allowed_values:
            raise ValueError(
                "Invalid value for `default_user_role` ({0}), must be one of {1}"  # noqa: E501
                .format(default_user_role, allowed_values)
            )

        self._default_user_role = default_user_role

    @property
    def member_collection_create(self):
        """Gets the member_collection_create of this Team.  # noqa: E501

        Whether members are allowed to create new collections. If false then only admins can create collections.  # noqa: E501

        :return: The member_collection_create of this Team.  # noqa: E501
        :rtype: bool
        """
        return self._member_collection_create

    @member_collection_create.setter
    def member_collection_create(self, member_collection_create):
        """Sets the member_collection_create of this Team.

        Whether members are allowed to create new collections. If false then only admins can create collections.  # noqa: E501

        :param member_collection_create: The member_collection_create of this Team.  # noqa: E501
        :type: bool
        """

        self._member_collection_create = member_collection_create

    @property
    def document_embeds(self):
        """Gets the document_embeds of this Team.  # noqa: E501

        Whether this team has embeds in documents globally enabled. It can be disabled to reduce potential data leakage to third parties.  # noqa: E501

        :return: The document_embeds of this Team.  # noqa: E501
        :rtype: bool
        """
        return self._document_embeds

    @document_embeds.setter
    def document_embeds(self, document_embeds):
        """Sets the document_embeds of this Team.

        Whether this team has embeds in documents globally enabled. It can be disabled to reduce potential data leakage to third parties.  # noqa: E501

        :param document_embeds: The document_embeds of this Team.  # noqa: E501
        :type: bool
        """

        self._document_embeds = document_embeds

    @property
    def collaborative_editing(self):
        """Gets the collaborative_editing of this Team.  # noqa: E501

        Whether this team has collaborative editing in documents globally enabled.  # noqa: E501

        :return: The collaborative_editing of this Team.  # noqa: E501
        :rtype: bool
        """
        return self._collaborative_editing

    @collaborative_editing.setter
    def collaborative_editing(self, collaborative_editing):
        """Sets the collaborative_editing of this Team.

        Whether this team has collaborative editing in documents globally enabled.  # noqa: E501

        :param collaborative_editing: The collaborative_editing of this Team.  # noqa: E501
        :type: bool
        """

        self._collaborative_editing = collaborative_editing

    @property
    def invite_required(self):
        """Gets the invite_required of this Team.  # noqa: E501

        Whether an invite is required to join this team, if false users may join with a linked SSO provider.  # noqa: E501

        :return: The invite_required of this Team.  # noqa: E501
        :rtype: bool
        """
        return self._invite_required

    @invite_required.setter
    def invite_required(self, invite_required):
        """Sets the invite_required of this Team.

        Whether an invite is required to join this team, if false users may join with a linked SSO provider.  # noqa: E501

        :param invite_required: The invite_required of this Team.  # noqa: E501
        :type: bool
        """

        self._invite_required = invite_required

    @property
    def allowed_domains(self):
        """Gets the allowed_domains of this Team.  # noqa: E501


        :return: The allowed_domains of this Team.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_domains

    @allowed_domains.setter
    def allowed_domains(self, allowed_domains):
        """Sets the allowed_domains of this Team.


        :param allowed_domains: The allowed_domains of this Team.  # noqa: E501
        :type: list[str]
        """

        self._allowed_domains = allowed_domains

    @property
    def guest_signin(self):
        """Gets the guest_signin of this Team.  # noqa: E501

        Whether this team has guest signin enabled. Guests can signin with an email address and are not required to have a Google Workspace/Slack SSO account once invited.  # noqa: E501

        :return: The guest_signin of this Team.  # noqa: E501
        :rtype: bool
        """
        return self._guest_signin

    @guest_signin.setter
    def guest_signin(self, guest_signin):
        """Sets the guest_signin of this Team.

        Whether this team has guest signin enabled. Guests can signin with an email address and are not required to have a Google Workspace/Slack SSO account once invited.  # noqa: E501

        :param guest_signin: The guest_signin of this Team.  # noqa: E501
        :type: bool
        """

        self._guest_signin = guest_signin

    @property
    def subdomain(self):
        """Gets the subdomain of this Team.  # noqa: E501

        Represents the subdomain at which this team's knowledge base can be accessed.  # noqa: E501

        :return: The subdomain of this Team.  # noqa: E501
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this Team.

        Represents the subdomain at which this team's knowledge base can be accessed.  # noqa: E501

        :param subdomain: The subdomain of this Team.  # noqa: E501
        :type: str
        """

        self._subdomain = subdomain

    @property
    def url(self):
        """Gets the url of this Team.  # noqa: E501

        The fully qualified URL at which this team's knowledge base can be accessed.  # noqa: E501

        :return: The url of this Team.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Team.

        The fully qualified URL at which this team's knowledge base can be accessed.  # noqa: E501

        :param url: The url of this Team.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Team, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Team):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
