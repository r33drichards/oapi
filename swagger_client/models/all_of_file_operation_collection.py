# coding: utf-8

"""
    Outline API

    # Introduction  The Outline API is structured in an RPC style. It enables you to programatically interact with all aspects of Outline’s data – in fact, the main application is built on exactly the same API.  The API structure is available as an  [openapi specification](https://github.com/outline/openapi) if that’s your  jam – it can be used to generate clients for most programming languages.  # Making requests  Outline’s API follows simple RPC style conventions where each API endpoint is a method on `https://app.getoutline.com/api/method`. Both `GET` and `POST`  methods are supported but it’s recommended that you make all call using POST. Only HTTPS is supported and all response payloads are JSON.  When making `POST` requests, request parameters are parsed depending on Content-Type header. To make a call using JSON payload, you must pass Content-Type: application/json header, here’s an example using CURL:  ``` curl https://app.getoutline.com/api/documents.info -X POST -H 'authorization: Bearer MY_API_KEY' -H 'content-type: application/json' -H 'accept: application/json' -d '{\"id\": \"outline-api-NTpezNwhUP\"}' ```  Or, with JavaScript:  ```javascript const response = await fetch(\"https://app.getoutline.com/api/documents.info\", {   method: \"POST\",   headers: {     Accept: \"application/json\",     \"Content-Type\": \"application/json\",     Authorization: 'Bearer MY_API_KEY'   } })  const body = await response.json(); const document = body.data; ```  # Authentication  To access API endpoints, you must provide a valid API key. You can create new API keys in your [account settings](https://app.getoutline.com/settings). Be careful when handling your keys as they give access to all of your documents, you should treat them like passwords and they should never be committed to source control.  To authenticate with API, you can supply the API key as a header (`Authorization: Bearer YOUR_API_KEY`) or as part of the payload using `token`  parameter. Header based authentication is highly recommended so that your keys don’t accidentally leak into logs.  Some API endpoints allow unauthenticated requests for public resources and they can be called without an API key.  # Errors  All successful API requests will be returned with a 200 or 201 status code and `ok: true` in the response payload. If there’s an error while making the request, the appropriate status code is returned with the error message:  ``` {   \"ok\": false,   \"error: \"Not Found\" } ```  # Pagination  Most top-level API resources have support for \"list\" API methods. For instance, you can list users, documents, and collections. These list methods share common parameters, taking both `limit` and `offset`.  Responses will echo these parameters in the root `pagination` key, and also include a `nextPath` key which can be used as a handy shortcut to fetch the next page of results. For example:  ``` {   ok: true,   status: 200,   data: […],   pagination: {     limit: 25,     offset: 0,     nextPath: \"/api/documents.list?limit=25&offset=25\"   } } ```  # Policies  Many API resources have associated \"policies\", these objects describe the current API keys authorized actions related to an individual resource. It should be noted that the policy \"id\" is identical to the resource it is related to, policies themselves do not have unique identifiers.  For most usecases of the API, policies can be safely ignored. Calling unauthorized methods will result in the appropriate response code – these are used in the main Outline UI to adjust which elements are visible.   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: hello@getoutline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AllOfFileOperationCollection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'sort': 'CollectionSort',
        'index': 'str',
        'documents': 'list[NavigationNode]',
        'color': 'str',
        'icon': 'str',
        'permission': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'deleted_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'sort': 'sort',
        'index': 'index',
        'documents': 'documents',
        'color': 'color',
        'icon': 'icon',
        'permission': 'permission',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'deleted_at': 'deletedAt'
    }

    def __init__(self, id=None, name=None, description=None, sort=None, index=None, documents=None, color=None, icon=None, permission=None, created_at=None, updated_at=None, deleted_at=None):  # noqa: E501
        """AllOfFileOperationCollection - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._sort = None
        self._index = None
        self._documents = None
        self._color = None
        self._icon = None
        self._permission = None
        self._created_at = None
        self._updated_at = None
        self._deleted_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if sort is not None:
            self.sort = sort
        if index is not None:
            self.index = index
        if documents is not None:
            self.documents = documents
        if color is not None:
            self.color = color
        if icon is not None:
            self.icon = icon
        if permission is not None:
            self.permission = permission
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if deleted_at is not None:
            self.deleted_at = deleted_at

    @property
    def id(self):
        """Gets the id of this AllOfFileOperationCollection.  # noqa: E501

        Unique identifier for the object.  # noqa: E501

        :return: The id of this AllOfFileOperationCollection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AllOfFileOperationCollection.

        Unique identifier for the object.  # noqa: E501

        :param id: The id of this AllOfFileOperationCollection.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AllOfFileOperationCollection.  # noqa: E501

        The name of the collection.  # noqa: E501

        :return: The name of this AllOfFileOperationCollection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AllOfFileOperationCollection.

        The name of the collection.  # noqa: E501

        :param name: The name of this AllOfFileOperationCollection.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AllOfFileOperationCollection.  # noqa: E501

        A description of the collection, may contain markdown formatting  # noqa: E501

        :return: The description of this AllOfFileOperationCollection.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AllOfFileOperationCollection.

        A description of the collection, may contain markdown formatting  # noqa: E501

        :param description: The description of this AllOfFileOperationCollection.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def sort(self):
        """Gets the sort of this AllOfFileOperationCollection.  # noqa: E501


        :return: The sort of this AllOfFileOperationCollection.  # noqa: E501
        :rtype: CollectionSort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this AllOfFileOperationCollection.


        :param sort: The sort of this AllOfFileOperationCollection.  # noqa: E501
        :type: CollectionSort
        """

        self._sort = sort

    @property
    def index(self):
        """Gets the index of this AllOfFileOperationCollection.  # noqa: E501

        The position of the collection in the sidebar  # noqa: E501

        :return: The index of this AllOfFileOperationCollection.  # noqa: E501
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this AllOfFileOperationCollection.

        The position of the collection in the sidebar  # noqa: E501

        :param index: The index of this AllOfFileOperationCollection.  # noqa: E501
        :type: str
        """

        self._index = index

    @property
    def documents(self):
        """Gets the documents of this AllOfFileOperationCollection.  # noqa: E501


        :return: The documents of this AllOfFileOperationCollection.  # noqa: E501
        :rtype: list[NavigationNode]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this AllOfFileOperationCollection.


        :param documents: The documents of this AllOfFileOperationCollection.  # noqa: E501
        :type: list[NavigationNode]
        """

        self._documents = documents

    @property
    def color(self):
        """Gets the color of this AllOfFileOperationCollection.  # noqa: E501

        A color representing the collection, this is used to help make collections more identifiable in the UI. It should be in HEX format including the #  # noqa: E501

        :return: The color of this AllOfFileOperationCollection.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this AllOfFileOperationCollection.

        A color representing the collection, this is used to help make collections more identifiable in the UI. It should be in HEX format including the #  # noqa: E501

        :param color: The color of this AllOfFileOperationCollection.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def icon(self):
        """Gets the icon of this AllOfFileOperationCollection.  # noqa: E501

        A string that represents an icon in the outline-icons package  # noqa: E501

        :return: The icon of this AllOfFileOperationCollection.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this AllOfFileOperationCollection.

        A string that represents an icon in the outline-icons package  # noqa: E501

        :param icon: The icon of this AllOfFileOperationCollection.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def permission(self):
        """Gets the permission of this AllOfFileOperationCollection.  # noqa: E501


        :return: The permission of this AllOfFileOperationCollection.  # noqa: E501
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this AllOfFileOperationCollection.


        :param permission: The permission of this AllOfFileOperationCollection.  # noqa: E501
        :type: str
        """
        allowed_values = ["read", "read_write"]  # noqa: E501
        if permission not in allowed_values:
            raise ValueError(
                "Invalid value for `permission` ({0}), must be one of {1}"  # noqa: E501
                .format(permission, allowed_values)
            )

        self._permission = permission

    @property
    def created_at(self):
        """Gets the created_at of this AllOfFileOperationCollection.  # noqa: E501

        The date and time that this object was created  # noqa: E501

        :return: The created_at of this AllOfFileOperationCollection.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AllOfFileOperationCollection.

        The date and time that this object was created  # noqa: E501

        :param created_at: The created_at of this AllOfFileOperationCollection.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AllOfFileOperationCollection.  # noqa: E501

        The date and time that this object was last changed  # noqa: E501

        :return: The updated_at of this AllOfFileOperationCollection.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AllOfFileOperationCollection.

        The date and time that this object was last changed  # noqa: E501

        :param updated_at: The updated_at of this AllOfFileOperationCollection.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this AllOfFileOperationCollection.  # noqa: E501

        The date and time that this object was deleted  # noqa: E501

        :return: The deleted_at of this AllOfFileOperationCollection.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this AllOfFileOperationCollection.

        The date and time that this object was deleted  # noqa: E501

        :param deleted_at: The deleted_at of this AllOfFileOperationCollection.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllOfFileOperationCollection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllOfFileOperationCollection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
