# coding: utf-8

"""
    Outline API

    # Introduction  The Outline API is structured in an RPC style. It enables you to programatically interact with all aspects of Outline’s data – in fact, the main application is built on exactly the same API.  The API structure is available as an  [openapi specification](https://github.com/outline/openapi) if that’s your  jam – it can be used to generate clients for most programming languages.  # Making requests  Outline’s API follows simple RPC style conventions where each API endpoint is a method on `https://app.getoutline.com/api/method`. Both `GET` and `POST`  methods are supported but it’s recommended that you make all call using POST. Only HTTPS is supported and all response payloads are JSON.  When making `POST` requests, request parameters are parsed depending on Content-Type header. To make a call using JSON payload, you must pass Content-Type: application/json header, here’s an example using CURL:  ``` curl https://app.getoutline.com/api/documents.info -X POST -H 'authorization: Bearer MY_API_KEY' -H 'content-type: application/json' -H 'accept: application/json' -d '{\"id\": \"outline-api-NTpezNwhUP\"}' ```  Or, with JavaScript:  ```javascript const response = await fetch(\"https://app.getoutline.com/api/documents.info\", {   method: \"POST\",   headers: {     Accept: \"application/json\",     \"Content-Type\": \"application/json\",     Authorization: 'Bearer MY_API_KEY'   } })  const body = await response.json(); const document = body.data; ```  # Authentication  To access API endpoints, you must provide a valid API key. You can create new API keys in your [account settings](https://app.getoutline.com/settings). Be careful when handling your keys as they give access to all of your documents, you should treat them like passwords and they should never be committed to source control.  To authenticate with API, you can supply the API key as a header (`Authorization: Bearer YOUR_API_KEY`) or as part of the payload using `token`  parameter. Header based authentication is highly recommended so that your keys don’t accidentally leak into logs.  Some API endpoints allow unauthenticated requests for public resources and they can be called without an API key.  # Errors  All successful API requests will be returned with a 200 or 201 status code and `ok: true` in the response payload. If there’s an error while making the request, the appropriate status code is returned with the error message:  ``` {   \"ok\": false,   \"error: \"Not Found\" } ```  # Pagination  Most top-level API resources have support for \"list\" API methods. For instance, you can list users, documents, and collections. These list methods share common parameters, taking both `limit` and `offset`.  Responses will echo these parameters in the root `pagination` key, and also include a `nextPath` key which can be used as a handy shortcut to fetch the next page of results. For example:  ``` {   ok: true,   status: 200,   data: […],   pagination: {     limit: 25,     offset: 0,     nextPath: \"/api/documents.list?limit=25&offset=25\"   } } ```  # Policies  Many API resources have associated \"policies\", these objects describe the current API keys authorized actions related to an individual resource. It should be noted that the policy \"id\" is identical to the resource it is related to, policies themselves do not have unique identifiers.  For most usecases of the API, policies can be safely ignored. Calling unauthorized methods will result in the appropriate response code – these are used in the main Outline UI to adjust which elements are visible.   # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: hello@getoutline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'model_id': 'str',
        'actor_id': 'str',
        'actor_ip_address': 'str',
        'collection_id': 'str',
        'document_id': 'str',
        'created_at': 'datetime',
        'data': 'object',
        'actor': 'User'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'model_id': 'modelId',
        'actor_id': 'actorId',
        'actor_ip_address': 'actorIpAddress',
        'collection_id': 'collectionId',
        'document_id': 'documentId',
        'created_at': 'createdAt',
        'data': 'data',
        'actor': 'actor'
    }

    def __init__(self, id=None, name=None, model_id=None, actor_id=None, actor_ip_address=None, collection_id=None, document_id=None, created_at=None, data=None, actor=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._model_id = None
        self._actor_id = None
        self._actor_ip_address = None
        self._collection_id = None
        self._document_id = None
        self._created_at = None
        self._data = None
        self._actor = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if model_id is not None:
            self.model_id = model_id
        if actor_id is not None:
            self.actor_id = actor_id
        if actor_ip_address is not None:
            self.actor_ip_address = actor_ip_address
        if collection_id is not None:
            self.collection_id = collection_id
        if document_id is not None:
            self.document_id = document_id
        if created_at is not None:
            self.created_at = created_at
        if data is not None:
            self.data = data
        if actor is not None:
            self.actor = actor

    @property
    def id(self):
        """Gets the id of this Event.  # noqa: E501

        Unique identifier for the object.  # noqa: E501

        :return: The id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.

        Unique identifier for the object.  # noqa: E501

        :param id: The id of this Event.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Event.  # noqa: E501


        :return: The name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Event.


        :param name: The name of this Event.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def model_id(self):
        """Gets the model_id of this Event.  # noqa: E501

        Identifier for the object this event is associated with when it is not one of document, collection, or user.  # noqa: E501

        :return: The model_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this Event.

        Identifier for the object this event is associated with when it is not one of document, collection, or user.  # noqa: E501

        :param model_id: The model_id of this Event.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def actor_id(self):
        """Gets the actor_id of this Event.  # noqa: E501

        The user that performed the action.  # noqa: E501

        :return: The actor_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._actor_id

    @actor_id.setter
    def actor_id(self, actor_id):
        """Sets the actor_id of this Event.

        The user that performed the action.  # noqa: E501

        :param actor_id: The actor_id of this Event.  # noqa: E501
        :type: str
        """

        self._actor_id = actor_id

    @property
    def actor_ip_address(self):
        """Gets the actor_ip_address of this Event.  # noqa: E501

        The ip address the action was performed from. This field is only returned when the `auditLog` boolean is true.  # noqa: E501

        :return: The actor_ip_address of this Event.  # noqa: E501
        :rtype: str
        """
        return self._actor_ip_address

    @actor_ip_address.setter
    def actor_ip_address(self, actor_ip_address):
        """Sets the actor_ip_address of this Event.

        The ip address the action was performed from. This field is only returned when the `auditLog` boolean is true.  # noqa: E501

        :param actor_ip_address: The actor_ip_address of this Event.  # noqa: E501
        :type: str
        """

        self._actor_ip_address = actor_ip_address

    @property
    def collection_id(self):
        """Gets the collection_id of this Event.  # noqa: E501

        Identifier for the associated collection, if any  # noqa: E501

        :return: The collection_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this Event.

        Identifier for the associated collection, if any  # noqa: E501

        :param collection_id: The collection_id of this Event.  # noqa: E501
        :type: str
        """

        self._collection_id = collection_id

    @property
    def document_id(self):
        """Gets the document_id of this Event.  # noqa: E501

        Identifier for the associated document, if any  # noqa: E501

        :return: The document_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this Event.

        Identifier for the associated document, if any  # noqa: E501

        :param document_id: The document_id of this Event.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def created_at(self):
        """Gets the created_at of this Event.  # noqa: E501

        The date and time that this event was created  # noqa: E501

        :return: The created_at of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Event.

        The date and time that this event was created  # noqa: E501

        :param created_at: The created_at of this Event.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def data(self):
        """Gets the data of this Event.  # noqa: E501

        Additional unstructured data associated with the event  # noqa: E501

        :return: The data of this Event.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Event.

        Additional unstructured data associated with the event  # noqa: E501

        :param data: The data of this Event.  # noqa: E501
        :type: object
        """

        self._data = data

    @property
    def actor(self):
        """Gets the actor of this Event.  # noqa: E501


        :return: The actor of this Event.  # noqa: E501
        :rtype: User
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this Event.


        :param actor: The actor of this Event.  # noqa: E501
        :type: User
        """

        self._actor = actor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
